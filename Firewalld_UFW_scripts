_______________________________________________________________________________________
Random firewall scripts to assist junior sysadmins for firewalld based systems:
_______________________________________________________________________________________

----------------------------------------------------------------
Block IP:
----------------------------------------------------------------

#!/bin/bash

if [ -z "$1" ]; then
  echo "Usage: ./blockip IPADDRESS"
  echo "Example: ./blockip 192.168.1.5"
else

firewall-cmd --permanent --add-rich-rule="rule family='ipv4' source address='$1' reject"
firewall-cmd --reload
echo "$1 successfully blocked with the following rule:"
firewall-cmd --list-all | grep $1
fi


----------------------------------------------------------------
Allow_IP_port(tcp):
----------------------------------------------------------------

#!/bin/bash

if [ -z "$1" ]; then
  echo "Usage: ./allow_IP_port IPADDRESS PORT"
  echo "Example: ./allow_IP_port 192.168.1.5 2242"
else


firewall-cmd --permanent --add-rich-rule="rule family='ipv4' source address='$1' port protocol='tcp' port='$2' accept"
firewall-cmd --reload
fi


----------------------------------------------------------------
Apache_Top_Unique_IP_Hits:
----------------------------------------------------------------

#simple one-liner to show unique hits for a specific vhost
#!/bin/bash

if [ -z "$1" ]; then
  echo "Usage: ./Apache_Top_Unique_IP_Hits DATE"
  echo "Example: ./Apache_Top_Unique_IP_Hits 16/May/2019"
else

grep $1 /var/log/httpd/access_log | awk '{print$1}' | sort | uniq -c | sort -nr | head -n 20


fi

----------------------------------------------------------------
Check_bad_ips (Cronjob script to block IPs that attempt to authenticate with a bad protocol version identification):
----------------------------------------------------------------

#!/bin/bash
LOGFILE=

if cat /var/log/secure* | grep -i 'Bad protocol version identification' | awk '{print $12}' > /dev/null; then
        echo "______________________________" >>  $LOGFILE
        echo "$(date)" >>   $LOGFILE
        echo "---------" >>   $LOGFILE
        for BADIP in `cat /var/log/secure* | grep -i 'Bad protocol version identification' | awk '{print $12}' | uniq`; do
                if firewall-cmd --list-all | grep $BADIP > /dev/null; then
                        echo "Rule previously created for IP: $BADIP"  >>  $LOGFILE
                else
                        firewall-cmd --permanent --add-rich-rule="rule family='ipv4' source address='$BADIP' reject"
                        firewall-cmd --reload
                        echo "!!Created FW block rule for IP: $BADIP" >> $LOGFILE
                fi
        done;
        COUNT=`cat /var/log/secure* | grep -i 'Bad protocol version identification' | awk '{print $12}' | uniq | wc -l`
        echo "Current count: $COUNT" >> $LOGFILE
fi


_______________________________________________________________________________________
For UFW based systems:
_______________________________________________________________________________________

----------------------------------------------------------------
Block IP:
----------------------------------------------------------------

#!/bin/bash

if [ -z "$1" ]; then
  echo "Usage: ./blockip IPADDRESS"
  echo "Example: ./blockip 192.168.1.5"
else

ufw reject from $1 to any;
echo "$1 successfully blocked with the following rule: "
echo " "
ufw status | sed -n 1,4p ; ufw status | grep $1
fi

----------------------------------------------------------------
Allow_IP_port(tcp):
----------------------------------------------------------------

if [ -z "$2" ]; then
  echo "Usage: ./allow_IP_port IPADDRESS PORT"
  echo "Example: ./allow_IP_port 192.168.1.5 2222"
else
ufw allow from $1 proto tcp to any port $2; 
echo "$1 successfully allowed over port $2 with the following rule: "
echo " "
ufw status | sed -n 1,4p ; ufw status | grep $1
fi
